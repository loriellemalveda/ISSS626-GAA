---
title: "Hands on Exercise 5: Network Constrained Spatial Point Patterns Analysis"
author: "Lorielle Malveda"
---

# 1. OVERVIEW

Building on the previous lesson on ***Spatial Point Patterns Analysis***, this exercise takes a step further into more advanced methods. We will explore more sophisticated techniques for analyzing spatial point events.

***Network Constrained Spatial Point Patterns Analysis (NetSPAA)*** is composed of a set of methods specifically designed for analyzing spatial point events that occur on or alongside networks. These spatial point events could include, for example, traffic accident locations or childcare centers. The networks in question could be road systems, river networks, or other similar structures.

We are going to use the ***spNetwork*** package to:

1.  Calculate **Network Kernel Density Estimation (NKDE)**
2.  Conduct network **G-function and K-function analyses**

# 2. GETTING STARTED

## 2.1 Acquire Data

We are going to analyze childcare centers in the Punggol Planning Area. Two geospatial datasets will be used:

-   ***Punggol_St*** (line features geospatial data)

    -   stores the **road network** within the Punggol Planning Area.

-   ***Punggol_CC*** (point feature geospatial data)

    -   stores the **location of childcare centers** within the Punggol Planning Area.

**Both data sets are in ESRI shapefile format.**

## 2.2 Install and Launch R Packages

This code chunk uses `p_load()` of the ***pacman*** package (stands for Package Manager) to check if the following packages are installed in the computer. The packages will then be launched into R.

```{r}
pacman::p_load(sf, spNetwork, tmap, tidyverse)
```

More information on the 4 R Packages:

-   [**spNetwork**](https://cran.r-project.org/web/packages/spNetwork/index.html): offers functions for performing Spatial Point Patterns Analysis on networks, such as Kernel Density Estimation (KDE) and K-function analysis. Additionally, it can be used to construct spatial matrices (e.g., 'listw' objects similar to those in the **spdep** package) for conducting traditional spatial analysis, with spatial weights based on network distances.

-   [**sf**](https://r-spatial.github.io/sf/): designed to import, manage, and process vector-based geospatial data in R.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html): you must now be familiar with this as we have used this in the previous Hands-on Exercises. This provides functions for cartographic quality static point patterns or interactive maps by using the [Leaflet](https://leafletjs.com/) API.

## 2.3 Import Data

use the ***sf*** package to import the datasets as ***sf*** data frames.

```{r}
network <- st_read(dsn="C:/loriellemalveda/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex05/data/geospatial", 
                   layer="Punggol_St")
```

```{r}
childcare <- st_read(dsn="C:/loriellemalveda/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex05/data/geospatial",
                     layer="Punggol_CC")
```

Before proceeding to analysis, let us check first if they are all in the same projection system. **Do not forget to do this! :)** Seems like they are in the right projection system based on the results.

# 3. GEOSPATIAL DATA VISUALIZATION

Let's do some visualization to get an overview of the data.

Using `plot()`:

```{r}
plot(st_geometry(network))
plot(childcare,add=T,col='red',pch = 19)
```

Another way to plot is by using the ***tmap*** package. which produces high cartographic quality interactive maps.

Using ***tmap*** package:

```{r}
tmap_mode('view')
tm_shape(childcare) + 
  tm_dots() + 
  tm_shape(network) +
  tm_lines()
```

***Reminder!*** Always remember to switch back to plot mode after the interactive map.

```{r}
tmap_mode('plot')
```

# 4. NETWORK KDE (NKDE) ANALYSIS

In this section, we will carry out Network Kernel Density Estimation (NKDE) analysis using the relevant functions provided in the ***spNetwork*** package.

## 4.1 Preparing the *lixels* Objects

Before computing NKDE, the SpatialLines object need to be cut into ***lixels*** with a specified minimal distance. This task can be performed by using with `lixelize_lines()` of ***spNetwork*** shown in the code chunk below.

```{r}
lixels <- lixelize_lines(network, 
                         700, 
                         mindist = 375)
```

From the code chunk above:

-   The **length of a** **lixel**, *`lx_length`* is set to 700m

-   The **minimum length of a** **lixel**, *`mindist`* is set to 350m

After cutting, if the length of the **final lixel is shorter than the minimum distance**, then it is added to the previous lixel. If it is **`NULL`, then `mindist` = `maxdist`/10.** Those segments that are already shorter than the minimum distance (`mindist`)are not modified.

**Note:** There is another function called `lixelize_lines.mc()` which provides multicore processing support.

## 4.2 Generating Line Center Points

After preparing the ***lixel*** objects, we will now use the `lines_center()` function of the ***spNetwork*** package to generate a **SpatialPointsDataFrame** (i.e. samples) with line center points as shown in the code chunk below.

```{r}
samples <- lines_center(lixels) 
```

The points are located at the center of the line based on the length of the line.

## 4.3 Performing NKDE

We are now ready to compute for NKDE.

But not yet.

The dataset ***childcare*** currently is in 3D, but the NKDE function requires 2D points. Therefore we must use the `st_zm()` function of the ***sf*** package to drop a dimension.

```{r}
childcare <- st_zm(childcare)
```

```{r}
densities <- nkde(network, 
                  events = childcare,
                  w = rep(1, nrow(childcare)),
                  samples = samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)
```

Digesting the code chunk above:

-   `kernel_name`: indicates that the **quartic** kernel is used. Possible kernel methods supported by ***spNetwork*** are: **triangle, gaussian, scaled gaussian, tricube, cosine ,triweight, epanechnikov or uniform.**

-   `method:` indicates that the **simple** method is used to calculate the NKDE. Currently, ***spNetwork*** support three popular methods, which are:

    1.  **method=“simple”**, introduced by Xie et al. (2008). In this method, distances between events and sampling points are replaced by network distances, and the kernel formula is adjusted to calculate density over a linear unit rather than a real unit.
    2.  **method=“discontinuous”**, proposed by Okabe et al. (2008), equally “divides” the mass density of an event at intersections of lixels.
    3.  **method=“continuous”** was also introduced by Okabe et al. (2008) to address the discontinuity issue of the previous method. While the discontinuous method is unbiased, it results in a discontinuous kernel function, which can be counter-intuitive. This continuous method adjusts the density before the intersection, making the function smooth and continuous.

### VISUALIZING NKDE

First step is to insert the computed density values before visualizing the NKDE values.

```{r}
samples$density <- densities
lixels$density <- densities
```

The code chunk below is used to rescale the density values from number of events/m to number of events/km since the svy21 projection system is in meters, and the computed density values are very small i.e. 0.0000005.

```{r}
# rescaling to help the mapping
samples$density <- samples$density*1000
lixels$density <- lixels$density*1000
```

Now to properly visualize the NKDE values, let us utilize the ***tmap*** package.

```{r}
tmap_mode('view')
tm_shape(lixels)+
  tm_lines(col="density")+
tm_shape(childcare)+
  tm_dots()
tmap_mode('plot')
```

The interactive map above highlights the road segments (those in darker color) with **relatively higher density** of childcare centers than those road segments with **relatively lower density** of childcare centers (those in lighter color).

# 5. NETWORK CONSTRAINED G- AND K- FUNCTION ANALYSIS

In this section, we are going to perform the Complete Spatial Randomness (CSR) test by using the `kfunctions()` of the ***spNetwork*** package. Check out the previous Hands-on Exercise to recall what this is.

The null hypothesis is defined as:

**H~o~: The observed spatial point events (i.e distribution of childcare centers) are uniformly distributed over a street network in the Punggol Planning Area.**

This test is grounded on the assumption of a binomial point process, which posits that the childcare centers are randomly and independently distributed across the street network. This serves as the null hypothesis for analyzing whether the observed distribution significantly deviates from randomness.

If we reject the hypothesis, then we may infer that the distribution of childcare centers are spatially interacting and dependent on each other; as a result, they may form nonrandom patterns.

```{r}
kfun_childcare <- kfunctions(network, 
                             childcare,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05)
```

For more informaiton on the arguments used in the code chunk above, refer to the user guide of ***spNetwork*** package.

The output of `kfunctions()` is a list with the following values:

-   *plotkA*, a ggplot2 object representing the values of the K-function

-   *plotgA*, a ggplot2 object representing the values of the G-function

-   *valuesA*, a DataFrame with the values used to build the plots

For example, we can visualize the ggplot2 object of K-function by using the code chunk below.

```{r}
kfun_childcare$plotk
```

The blue line represents the empirical network K-function of the childcare centers in Punggol planning area, while the gray envelope graphs the results of the 50 simulations in the interval 2.5% - 97.5%.

Since the blue line (between the distance of 250m-400m) is below the gray area, then we can infer that the childcare centers in Punggol planning area resemble a regular pattern at the distance of 250m-400m.

# 6. References

-   [spNetwork: Spatial Analysis on Network](https://cran.r-project.org/web/packages/spNetwork/index.html)

-   [Network Kernel Density Estimate](https://cran.r-project.org/web/packages/spNetwork/vignettes/NKDE.html)

-   [Details about NKDE](https://cran.r-project.org/web/packages/spNetwork/vignettes/NKDEdetailed.html)

-   [Network k Functions](https://cran.r-project.org/web/packages/spNetwork/vignettes/KNetworkFunctions.html)
