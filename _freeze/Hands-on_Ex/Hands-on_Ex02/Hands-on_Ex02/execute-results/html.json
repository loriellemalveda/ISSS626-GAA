{
  "hash": "afa15990d629c96f99ff89b229e81778",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R\"\nauthor: \"Lorielle Malveda\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n---\n\n\n# 1. OVERVIEW\n\nThis Hands-on Exercise covers Thematic Mapping and Geovisualization, both of which are very helpful in Geospatial Analytics.\n\n***Thematic Mapping*** is used to display the spatial pattern of a theme or attribute. On the other hand, ***Geovisualization*** is a more interactive method for uncovering unknowns.\n\n# 2. GETTING STARTED\n\n## 2.1 Install and Launch R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf,tmap, tidyverse)\n```\n:::\n\n\nOne thing that is different from the previous Hands-on Exercise is the addition of the ***tmap*** package. Other packages we need include: readr, tidyr, and diplyr but there is no need to specify them as they are already under the ***tidyverse*** package.\n\n## 2.2 Acquire Data\n\nFor this exercise, we are going to use the following:\n\n-   Master Plan 2014 Subzone Boundary (Web) from data.gov.sg\n\n-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling (June 2011-2020) from the Department of Statistics Singapore\n\nThe second one is aspatial and we are going to use PA and PZ as unique identifiers to geocode to the `MP14_SUBZONE_WEB_PL` shapefile.\n\n## 2.3 Import Data\n\n### **GEOSPATIAL DATA**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"C:/loriellemalveda/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex02/data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\loriellemalveda\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\nExamine the created ***mpsz***.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n\n\n:::\n:::\n\n\nBy default, only the first 10 records will be displayed. You can specify the number of records you want to see through other functions, such as `head()`, which accepts a parameter ***n***, pertaining to the ***number of records***.\n\n### **ATTRIBUTE DATA**\n\nNext to import is the respopagsex2011to2020.csv file and save it into a dataframe in R called **popdata**.\n\nThe task will be performed by using `read_csv()` function of ***readr*** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"C:/loriellemalveda/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex02/data/aspatial/respopagesextod2011to2020.csv\", \n                    show_col_types = FALSE)\n```\n:::\n\n\n## 2.4 Data Preparation\n\nTo get the data ready for thematic mapping, we must prepare a data table with year 2020 values and a few variables, including ***PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL,*** and ***DEPENDENCY.***\n\n### **DATA WRANGLING**\n\nThe code below used 2 functions:\n\n***tidyr*** package - `pivot_wider()`\n\n***dplyr*** package - `mutate()`, `filter()`, `group_by()`, and `select()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n```\n:::\n\n\nThe code processes a dataset named `popdata` to create a summary dataset called `popdata2020`.\n\n### **JOINING ATTRIBUTE AND GEOSPATIAL DATA**\n\nFirst step is to convert the values in the PA and SZ fields to uppercase.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\nNext thing to do is to use dplyr's `left_join()` function to join the geographical data and attribute table on the planning subzone name - SUBZONE_N and SZ as the common identifier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\nWe used `left_join()` to ensure that the output is a simple features data frame.\n\nLastly, we create:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mpsz_pop2020, \"C:/loriellemalveda/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex02/data/rds/mpszpop2020.rds\")\n```\n:::\n\n\nThe code above is used to save an R object to an RDS file.\n\n# **3. CHOROPLETH MAPPING USING *tmap***\n\nChoropleth mapping involves symbolizing enumeration units like countries, provinces, states, counties or census units, using varying patterns or graduated colors to represent different data values. For example, a social scientist might use a choropleth map to portray the spatial distribution of elderly population in Singapore by the Master Plan 2014 Subzone Boundary.\n\nThere are 2 approaches to prepare thematic map using ***tmap***:\n\n1.  Plotting a thematic map quickly using `qtm()`\n2.  Plotting highly customizable thematic maps by using ***tmap*** elements.\n\n## 3.1 Plotting a Choropleth Map Quickly Using `qtm()`\n\nThis is a standard cartographic choropleth map using easy code. Basically, to quickly draw a map, you can just opt to use ***tmap***'s `qtm()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nDrilling it down:\n\n-   `tmap_mode(\"plot\")` sets ***tmap*** to produce ***static maps***. For non-static/interactive mode, \"`view`\" option instead of \"`plot`\" must be used.\n\n-   `fill` is used to map the attribute. In the plot above, it is DEPENDENCY.\n\n## 3.2 Plotting a Choropleth Map Using *tmap*'s elements\n\nWhile qtm() can create a choropleth map easily and quickly, its downside is that it makes the aesthetics of the individual layers harder to control. To solve this, we may use ***tmap***’s drawing elements.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nThe following sub-sections drill down on the ***tmap*** functions that used to plot these elements. You can refer to the code used above.\n\n### **DRAWING A BASE MAP**\n\nThe first element is *`tm_shape(),`* followed by one or more layer elements, e.g. *`tm_fill()`* or *`tm_polygons()`*.\n\n*`tm_shape()`* is used to specify the input data, e.g. *mpsz_pop2020*, while *`tm_polygons()`* is used to render the planning subzone polygons.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nYou can think of this as sort of a **\"basic building block\"** of your choropleth map.\n\n### **DRAWING A CHOROPLETH MAP USING `tm_polygons()`**\n\nTo create a choropleth map displaying the geographical distribution of a selected variable by planning subzone, simply assign the target variable, such as `Dependency`, to `tm_polygons()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n**Key Pointers:**\n\n1.  **Default Interval Binning.** The default method for binning data when drawing a choropleth map is called ***\"pretty\"***.\n2.  **Default Color Scheme.** The default color scheme is \"`YloRd`\" of ***ColorBrewer***. More will be discussed in the next section.\n3.  **Missing Values.** By default, missing values are shaded in ***gray***.\n\n### **DRAWING A CHOROPLETH MAP USING `tm_fill()` and `tm_border()`**\n\n*`tm_polygons()`* is a wrapper of *`tm_fill()`* and *`tm_border()`*. *`tm_fill()`* shades the polygons by using the default color scheme and *`tm_borders()`* adds the borders of the shapefile onto the choropleth map.\n\nThe code chunk below draws a choropleth map by using *tm_fill()* alone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nNote that the planning subzones are shaded based on their respective **DEPENDENCY** values.\n\nTo include the boundary of the planning subzones, we can use `tm_borders` , as illustrated in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nAfter running the code, light-gray border lines have now been added to the map. Looks much better now!\n\n**Studying the code:**\n\n*`alpha`* - used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\n\nOthers:\n\n*`col`* = border color\n\n*`lwd`* = border line width. Default is 1.\n\n*`lty`* = border line type. Default is “solid”.\n\n## **3.3 Data Classification Methods of *tmap***\n\nMost choropleth maps utilize data classification methods to group a large number of observations into specific data ranges or classes.\n\n***tmap*** has ten data classification methods, namely: *`fixed`*, *`sd`*, *`equal`*, *`pretty`* (default), *`quantile`*, *`kmeans`*, *`hclust`*, *`bclust`*, *`fisher`*, and *`jenks`*.\n\nTo define a data classification method, we can use the *`style`* argument of *`tm_fill()`* or *`tm_polygons()`*.\n\n### Plotting choropleth maps with built-in classification methods\n\nThe code chunk shows a quantile data classification method that divides the data into 5 classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nThe *`equal`* data classification method was used to divide the DEPENDENCY variable into 5 classes with equal intervals.\n\nNotice that the distribution of quantile data classification method is more evenly distributed than the equal data classification method.\n\n> **Warning: Maps Lie!**\n\n> DIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\n> DIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\n### Plotting choropleth map with custom break\n\nThe category breaks are computed internally for all the built-in styles. However, you can override these defaults by explicitly setting breakpoints using the `breaks` argument in `tm_fill()`. In ***tmap*****,** the breaks include a minimum and maximum. As a result, to end up with n categories, n+1 elements must be specified in the ***breaks*** option (the values must be in ascending order).\n\nBefore setting breakpoints, it is always a good practice to obtain descriptive statistics of the variable in question. The code chunk below will be used to compute and display the descriptive statistics of the **DEPENDENCY** field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n```\n\n\n:::\n:::\n\n\nChecking the results above, the break point is set at 0.60, 0.70, 0.80, and 0.90. The arguments also require to include min and max value, which we set at 0 and 100. The *breaks* vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\n\nPlotting the choropleth map:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## 3.4 Color Scheme\n\n***tmap*** supports color ramps either defined by the user or by a set of predefined color ramps from the ***RColorBrewer*** package.\n\n### Using ColourBrewer Palette\n\nTo change the color scheme of the map, we can assign our preferred color palette to the `palette` argument of `tm_fill()`, as demonstrated in the code chunk below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nThe choropleth map is shaded in blue.\n\nTo reverse the color shading, add a “-” prefix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nNow the color scheme has been reversed.\n\n## 3.5 Map Layouts\n\nMap layout refers to the combination of all the map elements to create a cohesive map. Map elements may include the objects to be mapped, title, scale bar, compass, margins, and aspects ratios. The color settings and data classification methods, like choosing a color palette and setting breakpoints, influence the map's appearance.\n\n### MAP LEGEND\n\nIn `tmap`, there are various `legend` options available to adjust the placement, format, and its appearance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n### MAP STYLE\n\n`tmap` offers a wide range of layout settings that can be customized. These settings can be applied using the `tmap_style()` function.\n\nThe code chunk below demonstrates how the classic style is used:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n### CARTOGRAPHIC FURNITURE\n\nThe ***tmap*** package can also provide arguments to add other map elements, such as compass, scale bar, and grid lines.\n\nIn the code chunk below, *`tm_compass()`*, *`tm_scale_bar()`* and *`tm_grid()`* are used to add compass, scale bar and grid lines onto the choropleth map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nTo reset to the default style, refer to the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_style(\"white\")\n```\n:::\n\n\n## 3.6 **Drawing Small Multiple Choropleth Maps**\n\n**Small Multiple Maps**, also known as **Facet Maps**, consist of several maps placed side by side or stacked vertically. These maps allow for the visualization of how spatial relationships shift in relation to another variable, such as time.\n\nIn **tmap**, multiple small maps can be plotted in three ways:\n\n-   by assigning multiple values to at least one of the asthetic arguments,\n\n-   by defining a group-by variable in *`tm_facets()`*, and\n\n-   by creating multiple stand-alone maps with *`tmap_arrange()`*.\n\n### By assigning multiple values to at least one of the aesthetic arguments\n\nIn the code chunk below, multiple small choropleth maps are created by defining `n_cols` in `tm_fill()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nIn this example, multiple small choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n### By defining a group-by variable in *tm_facets()*\n\nAnother way to plot multiple small choropleth maps is by using `tm_facets()`. This function provides additional details for the facets, such as the number of rows and columns, and whether the coordinates and scales are fixed or free (independent of one another).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.units=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nThe argument `drop.shapes` has been renamed to `drop.units`, and is therefore deprecated.\n\n### By creating multiple stand-alone maps with *tmap_arrange()*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nIn this example, several small choropleth maps are generated by creating multiple individual maps using the `tmap_arrange()` function.\n\n# **4. MAPPING SPATIAL OBJECT MEETING A SELECTION CRITERION**\n\nInstead of creating multiple small choropleth maps, the selection funtion can be used to map the spatial objects that meet the specific selection criterion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}