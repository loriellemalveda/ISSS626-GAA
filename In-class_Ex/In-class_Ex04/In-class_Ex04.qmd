---
title: "In-class Exercise 4: Geographically Weighted Summary Statistics - gwModel methods"
author: "Lorielle Malveda"
date: "September 15, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
  warning: false
---

# 1. OVERVIEW

This In-class Exercise is about computing spatial weights using R, specifically utilizing the GWmodel package (GWSS - where SS stands for Summary Statistics.

# 2. GETTING STARTED

This code chunk uses `p_load()` of the ***pacman*** package (stands for Package Manager) to check if the following packages are installed in the computer. The packages will then be launched into R.

```{r}
pacman::p_load(sf, tmap, tidyverse, GWmodel, ggstatsplot, dplyr)
```

## 2.1 Importing Data

Datasets:

-   Hunan County Boundary Layer: geospatial data set in the ESRI shapefile format.

-   Hunan_2012.csv: aspatial data which contains selected Hunan’s local development indicators in 2012.

### **SHAPEFILE**

Let us use the **sf** package to import the Hunan shapefile into R.

The output is a simple features ***sf*** object.

```{r}
hunan_sf <- st_read(dsn = "data/geospatial",layer = "Hunan")
```

### CSV

Next, we will import *Hunan_2012.csv* into R by using the read_csv function of the **readr** package.

The output is R dataframe class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## 2.2 PERFORMING RELATIONAL JOIN

The following code chunk updates the attribute table of the `hunan` SpatialPolygonsDataFrame by merging it with the attribute fields of the `hunan2012` dataframe. This is accomplished using the `left_join()` function from the `dplyr` package:

```{r}
hunan_sf <- left_join(hunan_sf, hunan2012) %>%
  dplyr::select(1:3, 7, 15, 16, 31, 32)
```

```{r}
basemap <- tm_shape(hunan_sf) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan_sf, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## 2.3 Converting to SpatialPolygonDataFrame

We need to convert first as GWmodel is presently built around

```{r}
hunan_sp <- hunan_sf %>%
  as_Spatial()
```

Geographically Weighted Summary Statistics with Adaptive Bandwidth

Cross-validation

```{r}
bw_CV <- bw.gwr(GDPPC ~1,
                data= hunan_sp,
                approach = 'CV',
                adaptive = TRUE,
                kernel = 'bisquare',
                longlat = T)
```

Once the CV score gets really slow, it will stop the iteration. The number of optimal neighbors you have is 22.

AIC

The only thing that change is the approach argument.

```{r}
bw_AIC <- bw.gwr(GDPPC ~1,
                data= hunan_sp,
                approach = 'AIC',
                adaptive = TRUE,
                kernel = 'bisquare',
                longlat = T)
```

```{r}
gwstat <- gwss(data = hunan_sp,
               vars = "GDPPC",
               bw = bw_AIC,
               kernel = "bisquare",
               adaptive = TRUE,
               longlat = T)
```

Same goes for here. But it may not always put out the same result.

```{r}
gwstat_df <- as.data.frame(gwstat$SDF)
```

```{r}
hunan_gstat <- cbind(hunan_sf, gwstat_df)
```

```{r}
tm_shape(hunan_gstat) +
  tm_fill("GDPPC_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Distribution of geographically wieghted mean",
            main.title.position = "center",
            main.title.size = 2.0,
            legend.text.size = 1.2,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
```

```{r}
bw_CV <- bw.gwr(GDPPC ~1,
                data= hunan_sp,
                approach = 'CV',
                adaptive = FALSE,
                kernel = 'bisquare',
                longlat = T)
```

Produced different results. The number after fixed bandwidth is in kilometers.

AIC fixed bandwidth

```{r}
bw_AIC <- bw.gwr(GDPPC ~ 1, 
             data = hunan_sp,
             approach ="AIC",
             adaptive = FALSE, 
             kernel = "bisquare", 
             longlat = T)
```

The result is very much different from the recent one, almost doubling.

When you use adaptive, they are the same but using fixed distance gave out varying results because fixed is longer for some shapes. when you use distance you pick up variability but with adaptive using neighbor you remove this constraint.

When faced with this situation, try out different methods. In this case, adaptive bandwidth is better as it gave out the same metrics.

Computing geographically weighted summary statistics

```{r}
gwstat <- gwss(data = hunan_sp, 
               vars = "GDPPC", 
               bw= bw_AIC, 
               kernel = "bisquare", 
               adaptive=TRUE, 
               longlat= T)
```

The arguments must be the same as the previous code chunks.

```{r}
gwstat_df <- as.data.frame(gwstat$DF)
```

```{r}
tm_shape(hunan_gstat) +
  tm_fill("GDPPC_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Distribution of geographically wieghted mean",
            main.title.position = "center",
            main.title.size = 2.0,
            legend.text.size = 1.2,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
```

```{r}
ggscatterstats(
  data = hunan2012, 
  x = Agri, 
  y = GDPPC,
  xlab = "Gross Agriculture Output", ## label for the x-axis
  ylab = "GDP per capita", 
  label.var = County, 
  label.expression = Agri > 10000 & GDPPC > 50000, 
  point.label.args = list(alpha = 0.7, size = 4, color = "grey50"),
  xfill = "#CC79A7", 
  yfill = "#009E73", 
  title = "Relationship between GDP PC and Gross Agriculture Output")
```

```{r}
bw <- bw.gwr(GDPPC ~ GIO, 
             data = hunan_sp, 
             approach = "AICc", 
             adaptive = TRUE)
```

```{r}
gwstats <- gwss(hunan_sp, 
                vars = c("GDPPC", "GIO"), 
                bw = bw,
                kernel = "bisquare",
                adaptive = TRUE, 
                longlat = T)
```

```{r}
gwstat_df <- as.data.frame(gwstats$SDF) %>%
  select(c(12,13)) %>%
  rename(gwCorr = Corr_GDPPC.GIO,
         gwSpearman = Spearman_rho_GDPPC.GIO)
```

```{r}
hunan_Corr <- cbind(hunan_sf, gwstat_df)
```

```{r}
tm_shape(hunan_Corr) +
  tm_fill("gwSpearman",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Spearman Rho",
            main.title.position = "center",
            main.title.size = 2.0,
            legend.text.size = 1.2,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
```
