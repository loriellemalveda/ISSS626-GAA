---
title: "Hands-on Exercise 1.1: Geospatial Data Science with R"
author: "Lorielle Malveda"
---

# 1. OVERVIEW

First things first! This Hands-on Exercise covers importing and wrangling geospatial data using the necessary R packages.

# 2. GETTING STARTED

## 2.1 Install and Launch R Packages

```{r}
pacman::p_load(sf,tidyverse)
```

This code chunk uses `p_load()` of the ***pacman*** package (stands for Package Manager) to check if the ***sf*** and ***tidyverse*** packages are installed in the computer. The packages will then be launched into R.

## 2.2 Acquire Data

For this exercise, we are going to use the following:

-   Master Plan 2014 Subzone Boundary (Web) from data.gov.sg

-   Cycling Path from LTADataMall

-   Pre-Schools' Location from data.gov.sg

-   Latest version of Singapore Airbnb listing data from Inside Airbnb

The first 3 enumerated above are geospatial data while the last one is aspatial.Aspatial is not geospatial data with available x- and y- coordinates of the data points.

## 2.3 Import Data

### Master Plan 2014 Subzone Boundary (Web)

```{r}
mpsz = st_read(dsn = "C:/loriellemalveda/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

Running the code chunk shows that there are a total of ***323 multipolygon features and 15 fields*** in the simple feature data frame.

**`mpsz`** is in the svy21 project coordinated systems. For more info: <https://app.sla.gov.sg/sirent/About/PlaneCoordinateSystem>

### Cycling Path

```{r}
cyclingpath = st_read(dsn = "C:/loriellemalveda/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial", layer = "CyclingPathGazette")
```

There are ***2558 features and 2 fields*** in the **`cyclingpath`** linestring feature data frame and is also in the svy21 projected coordinates system.

### Pre-school Location

```{r}
preschool = st_read("C:/loriellemalveda/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/PreSchoolsLocation.kml")
```

**`preschool`** is a point feature dataframe with 2290 features and 2 fields. If the first2 data frames are in the svy21 coordinates system, preschool is in the wgs84 coordinates system.

# 3. EXPLORE CONTENT OF A SIMPLE FEATURE DATA FRAME

## 3.1 st_geometry()

**`st_geometry`** returns an object of class **sfc**. Assigning geometry to a **`data.frame`** creates an ***sf*** object, assigning it to an ***sf*** object replaces the geometry list-column.

```{r}
st_geometry(mpsz)
```

This st_geometry function displays basic information such as geometry type, geographic extent of the features, and the coordinate system.

## 3.2 glimpse()

glimpse() is a function under the dplyr library.

```{r}
glimpse(mpsz)
```

The results show the data type of each field.

## 3.3 head()

This function returns the first parts of the data frame. The number of elements/records to be displayed may be customized when you define ***n***.

```{r}
head(mpsz, n=5)
```

# 4. PLOT GEOSPATIAL DATA

I personally find this the most interesting -- plotting the geospatial data!

For this section, we mostly use the `plot()` function.

```{r}
plot(mpsz, max.plot = 15)
```

The code chunk shows the multi-plot of all the attributes of mpsz.

If this is too much, we can choose to plot only the geometry or specific attributes.

For example:

#### **GEOMETRY**

```{r}
plot(st_geometry(mpsz))
```

#### **PLN_AREA_N**

```{r}
plot(mpsz["PLN_AREA_N"])
```

#### **SUBZONE_N**

```{r}
plot(mpsz["SUBZONE_N"])
```

# 5. TRANSFORM PROJECTION

## 5.1 Changing the EPSG Code

There may be complications during the importing process; therefore, it must be carefully done to properly perform projection transformation.

Another function under the **sf** package is **`st_crs()`**. According to the documentation, this either retrieves a coordinate reference system from an sf or sfc object or sets/replaces retrieve coordinate reference system from an object.

```{r}
st_crs(mpsz)
```

Retrieving the EPSG code shows 9001, but the code for those under the svy21 system must be 3414.

To change this:

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Checking the CRS again:

```{r}
st_crs(mpsz)
```

Now we are certain that mpsz's EPSG code is 3414, which is the correct one.

## 5.2 Changing the projection system from the WGS84 Coordinate System to SVY21.

Next, we shall use `st_transform()` to convert the projection of the Preschool Dataset from the WGS84 coordinate system to the SVY21 coordinate system, i.e. EPSG 3414. We do this to make sure that everything is in the SVY21 coordinate system for compatibility and for better analysis.

```{r}
preschool3414 <- st_transform(preschool, crs = 3414)
```

# 6. IMPORT AND CONVERT ASPATIAL DATA

For this section, we are using listings.csv of the Airbnb data set.

**Importing and Displaying the Dataset.**

```{r}
listings <- read_csv("C:/loriellemalveda/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/aspatial/listings.csv")
```

The code chunk below shows `list()` of Base R instead of `glimpse(`). For this code chunk, we are just checking if the file has been imported properly.

```{r}
list(listings)
```

Based on the results, the ***listing*** tibble data frame consists of ***4252 rows and 16 columns***, with 2 useful fields --\> ***latitude and longitude***. These 2 fields are in the decimal degree format; safe to assume that the data is in the ***wgs84*** Geographic Coordinate System.

**Converting the aspatial data to a simple feature data frame.**

Since this section is all about aspatial data, we are also going to convert the ***listings*** data frame we just created to a simple feature data frame using the `st_as_sf()` of the sf packages. This function converts foreign objects to an sf object.

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Check if the file has been converted properly:

```{r}
glimpse(listings_sf)
```

It works!

# 7. GEOPROCESSING WITH SF PACKAGE: BUFFERING AND POINT-IN-POLYGON COUNT

We are going to use the wide range of geoprocessing functions in the sf package.

# 7.1 Buffering 

"Scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 meters of reserved land on the both sides of the current cycling path. You are tasked to determine the extent of the land needed to be acquired and their total area."

Solution:

1\. Compute the 5-meter buffers in the cycling paths.

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

2.  Calculate the area of the buffers.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

3.  The code chunk below will be used to derive the total land needed.

```{r}
sum(buffer_cycling$AREA)
```

**DONE!**

## 7.2 Point-in-Polygon Count 

"Scenario: A pre-school service group wants to find out the numbers of pre-schools in each Planning Subzone."

Solution:

1\. Identify pre-schools in each Planning Subzone using `st_intersects()`. Then calculate the number of pre-schools in each Planning Subzone using `length()`.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

Note: `st_intersects()` and `st_intersection()` are 2 different functions.

2.  Check the summary statistics using the code chunk below.

```{r}
summary(mpsz3414$`PreSch Count`)
```

3.  List the planning subzone with the most number of pre-schools using `top_n()` of the ***dplyr*** package.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

Calculate the density of pre-school by planning subzone.

 1. Use `st_area()` to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

2.  Use `mutate()` of the dplyr package to compute the density.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

**DONE!**

# 8. EXPLORATORY DATA ANALYSIS 

A must-step in Data Analytics is EDA. In this section, ***ggplot2*** functions are going to be introduced to create statistical graphs.

## HISTOGRAM

This histogram shows the distribution of ***Pre-school Density (PreSch Density)***.

```{r}
hist(mpsz3414$`PreSch Density`)
```

For a more customized and better look, we may use ***ggplot2*** functions. *(See code below.)*

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

With ggplot2, we are able customize titles, subtitles, colors, etc.

## SCATTERPLOT

The scatter plot below shows the relationship between ***Pre-school Density and Pre-school Count***. For further analysis, maybe we can check for regression to confirm any hunches.

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
