---
title: "Hands-on Exercise 9: Modelling Geographic of Accessibility"
author: "Lorielle Malveda"
date: "October 25, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
  warning: false
---

# **1. INTRODUCTION**

In this hands-on exercise, we will focus on modelling geographical accessibility using R’s Geospatial Analysis Packages.

# **2. LEARNING OUTCOME**

The goals of this Hands-on Exercise are as follows:

-   to import **GIS polygon data** into R and save them as simple feature data frame using the appropriate functions of the ***sf*** package in R;
-   to import **aspatial data** into R and save them as simple feature data frame by using the appropriate functions of the ***sf*** package in R;
-   to computer accessibility measures using the Hansen’s Potential Model and Spatial Accessibility Measure (SAM); and
-   to visualize the accessibility measures by using the ***tmap*** and ***ggplot2*** packages.

# 3. THE DATA

We will use 4 datasets, namely:

1.  `MP14_SUBZONE_NO_SEA_PL`: URA Master Plan 2014 subzone boundary GIS data. This data set is downloaded from *data.gov.sg*.

2.  `hexagons`: A 250m radius hexagons GIS data. This data set was created by using [`st_make_grid()`](https://r-spatial.github.io/sf/reference/st_make_grid.html) of the ***sf*** package. It is in the ESRI shapefile format.

3.  `ELDERCARE`: This is GIS data showing locations of eldercare services. This is also downloaded from data.gov.sg. There are two versions: One in ESRI shapefile format, and the other one in Google kml file format. For the purpose of this hands-on exercise, we are using the ESRI shapefile format.

4.  `OD_Matrix`: a distance matrix in csv format, which includes 6 fields. They are:

    -   `origin_id`: the unique id values of the origin (i.e. `fid` of hexagon data set.),

    -   `destination_id`: the unique id values of the destination (i.e. `fid` of `ELDERCARE` data set.),

    -   `entry_cost`: the perpendicular distance between the origins and the nearest road),

    -   `network_cost`: the actual network distance from the origin and destination,

    -   `exit_cost`: the perpendicular distance between the destination and the nearest road), and

    -   `total_cost`: the summation of `entry_cost`, `network_cost` and `exit_cost`.

All the values of the cost related fields are in **metres**.

::: callout-note
**Reminder:** *Except* `MP14_SUBZONE_NO_SEA_PL` *data set, the other three data set are specially prepared by Prof. Kam for teaching and research purpose. Students taking IS415 Geospatial Analytics and Applications are allowed to use them for hands-on exercise purpose. Please obtain formal approval from Prof. Kam if you want to use them for other courses or usage.*
:::

# 4. GETTING STARTED

Before getting started, let's first install the necessary R packages and launch them into the RStudio environment.

The R packages needed for this exercise are as follows:

-   **sf**: for spatial data handling

-   **spatialAcc**: for modelling geographical accessibility

-   **tidyverse, especially readr and dplyr**: attribute data handling

-   **tmap**: used for thematic mapping

-   **ggplot2:** useful for statistical graphics

-   **ggstatsplot**: statistical analysis

The code chunk below installs and launches these R packages into the RStudio environment.

```{r}
pacman::p_load(tmap, SpatialAcc, sf, 
               ggstatsplot, reshape2,
               tidyverse)
```

::: callout-note
By installing ***tidyverse***, we need not install ***readr***, ***dplyr,*** and ***ggplots*** packages separately. In fact, tidyverse also installs other R packages such as ***tidyr, stringr, forcats, tibble, purrr and magrittr***.
:::

# 5. GEOSPATIAL DATA WRANGLING

## 5.1 Importing Geospatial Data

Three geospatial datasets will be imported from the *data/geospatial* sub-folder.

They are MP14_SUBZONE_NO_SEA_PL, hexagons and ELDERCARE.

The code chunk below is used to import these datasets using the `st_read()` function of the ***sf*** packages.

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_NO_SEA_PL")
```

```{r}
hexagons <- st_read(dsn = "data/geospatial", layer = "hexagons") 
```

```{r}
eldercare <- st_read(dsn = "data/geospatial", layer = "ELDERCARE") 
```

The report above indicates that the R object containing the imported `MP14_SUBZONE_WEB_PL` shapefile is named `mpsz` and is a simple feature object with a geometry type of multipolygon. It’s also important to note that the `mpsz` simple feature object lacks EPSG information.

## 5.2 Updating CRS Information

Do not forget to correct the EPSG code! We will set it to "3414".

```{r}
mpsz <- st_transform(mpsz, 3414) 
eldercare <- st_transform(eldercare, 3414) 
hexagons <- st_transform(hexagons, 3414)
```

After transforming the projection metadata, you can verify the projection of the newly transformed `mpsz_svy21` by using `st_crs()` from the `sf` package.

The code snippet below will be used to verify the newly transformed `mpsz_svy21`.

```{r}
st_crs(mpsz)
```

The ***EPSG code*** is indicated as *3414* now.

## 5.3 Cleaning and Updating Attribute Fields of the Geospatial Data

The data tables of both `eldercare` and `hexagons` contain several redundant fields. The code chunks below will be used to exclude these redundant fields.

Additionally, a new field named `demand` will be added to the `hexagons` data table, and a new field named `capacity` will be added to the `eldercare` sf data frame. Both fields will be derived using the `mutate()` function from the `dplyr` package.

```{r}
eldercare <- eldercare %>%
  select(fid, ADDRESSPOS) %>%
  mutate(capacity = 100)
```

```{r}
hexagons <- hexagons %>%
  select(fid) %>%
  mutate(demand = 100)
```

::: callout-note
For the purpose of this hands-on exercise, a constant value of 100 is used. In practice, actual demands of the hexagon and capacity of the eldercare centres should be used.
:::

# **6. ASPATIAL DATA HANDLING AND WRANGLING**

## 6.1 Importing the Distance Matrix

The code chunk below uses the `read_csv()` function of the ***readr*** package to import `OD_Matrix.csv` into RStudio. The imported object is a tibble data.frame called `ODMatrix`.

```{r}
ODMatrix <- read_csv("data/aspatial/OD_Matrix.csv", skip = 0)
```

## **6.2 Tidying the Distance Matrix**

The imported ***ODMatrix*** organized the distance matrix column-wise.

![](images/clipboard-3158646600.png)

On the other hands, most of the modelling packages in R is expecting a matrix look similar to the figure below.

![](images/image2.jpg){width="544"}

The rows represent **origins** (i.e. also know as **from** field) and the columns represent **destination** (i.e. also known as **to** field.)

The code chunk below uses `spread()` of the ***tidyr*** package to transform the OD matrix from a thin format into a fat format.

```{r}
distmat <- ODMatrix %>%
  select(origin_id, destination_id, total_cost) %>%
  spread(destination_id, total_cost)%>%
  select(c(-c('origin_id')))
```

::: callout-note
Note: Since the tidyr version 1.0, a new function called `pivot_wider()` is introduced. Let's use this instead of `spread()`.
:::

Currently, the distance is measured in metres because the SVY21 projected coordinate system is used.

Let's convert the unit f measurement from ***metres to kilometres***.

```{r}
distmat_km <- as.matrix(distmat/1000)
```

# 7. MODELLING AND VISUALIZING ACCESSIBILITY USING HANSEN METHOD

## 7.1 Computing Hansen’s Accessibility

Now, we are ready to compute Hansen’s accessibility. Let's use `ac()` of the [**SpatialAcc**](https://cran.r-project.org/web/packages/SpatialAcc/index.html) package.

Before getting started, you are encouraged to read the [arguments](https://cran.r-project.org/web/packages/SpatialAcc/SpatialAcc.pdf) of the function at least once in order to ensure that the required inputs are available.

The code chunk below calculates Hansen’s accessibility using `ac()` of **SpatialAcc** and `data.frame()` is used to save the output in a data frame called `acc_Handsen`.

```{r}
acc_Hansen <- data.frame(ac(hexagons$demand,
                            eldercare$capacity,
                            distmat_km, 
                            #d0 = 50,
                            power = 2, 
                            family = "Hansen"))
```

![](images/clipboard-2156183258.png)

The default field name is very messy and long. Therefore, let's rename it to `accHansen` by using the code chunk below.

```{r}
colnames(acc_Hansen) <- "accHansen"
```

Now the column name looks tidier now.

![](images/clipboard-1830147547.png)

Next, we will convert the data table into tibble format by using the code chunk below.

```{r}
acc_Hansen <- tbl_df(acc_Hansen)
```

Lastly, `bind_cols()` of the ***dplyr*** package will be used to join the `acc_Hansen` tibble data frame with `hexagons` simple feature data frame. We name the output `hexagon_Hansen`.

```{r}
hexagon_Hansen <- bind_cols(hexagons, acc_Hansen)
```

Notice that hexagon_Hansen is a simple feature data frame and not a typical tibble data frame.

Let's combine the steps above in a single code chunk as shown below.

```{r}
acc_Hansen <- data.frame(ac(hexagons$demand,
                            eldercare$capacity,
                            distmat_km, 
                            #d0 = 50,
                            power = 0.5, 
                            family = "Hansen"))

colnames(acc_Hansen) <- "accHansen"
acc_Hansen <- tbl_df(acc_Hansen)
hexagon_Hansen <- bind_cols(hexagons, acc_Hansen)
```

## 7.2 Visualizing Hansen’s Accessibility

### EXTRACTING MAP EXTEND

First, we will extract the extent of the `hexagons` simple feature data frame using `st_bbox()` from the ***sf*** package.

```{r}
mapex <- st_bbox(hexagons)
```

The code snippet below uses a collection of mapping functions from the `tmap` package to create a high-quality cartographic map showing accessibility to eldercare centers in Singapore.

```{r}
tmap_mode("plot")
tm_shape(hexagon_Hansen,
         bbox = mapex) + 
  tm_fill(col = "accHansen",
          n = 10,
          style = "quantile",
          border.col = "black",
          border.lwd = 1) +
tm_shape(eldercare) +
  tm_symbols(size = 0.1) +
  tm_layout(main.title = "Accessibility to eldercare: Hansen method",
            main.title.position = "center",
            main.title.size = 2,
            legend.outside = FALSE,
            legend.height = 0.45, 
            legend.width = 3.0,
            legend.format = list(digits = 6),
            legend.position = c("right", "top"),
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.5)
```

### STATISTICAL GRAPHIC VISUALIZATION

In this section, we will compare the distribution of Hansen’s accessibility values by URA Planning Region.

First, we need to add the planning region field to the `hexagon_Hansen` simple feature data frame using the code snippet below.

```{r}
hexagon_Hansen <- st_join(hexagon_Hansen, mpsz, 
                          join = st_intersects)
```

Next, let's utilize `ggplot()` to plot the distribution using boxplots.

```{r}
ggplot(data=hexagon_Hansen, 
       aes(y = log(accHansen), 
           x= REGION_N)) +
  geom_boxplot() +
  geom_point(stat="summary", 
             fun.y="mean", 
             colour ="red", 
             size=2)
```

# 8. MODELLING AND VISUALIZING ACCESSIBILITY USING THE KD2SFCA METHOD

## 8.1 Computing KD2SFCA’s accessibility

In this section, we are going to repeat the steps we had learned in previous section to perform the analysis. Some multiple codes will be combined into one code chunk.

The code chunk below calculates Hansen’s accessibility using `ac()` of **SpatialAcc**. `data.frame()` is used to save the output in a dataframe called `acc_KD2SFCA`.

Notice that `KD2SFCA` is used for the "family" argument.

```{r}
acc_KD2SFCA <- data.frame(ac(hexagons$demand,
                            eldercare$capacity,
                            distmat_km, 
                            d0 = 50,
                            power = 2, 
                            family = "KD2SFCA"))

colnames(acc_KD2SFCA) <- "accKD2SFCA"
acc_KD2SFCA <- tbl_df(acc_KD2SFCA)
hexagon_KD2SFCA <- bind_cols(hexagons, acc_KD2SFCA)
```

## 8.2 Visualizing KD2SFCA’s accessibility

The code chunk below uses a collection of mapping functions of the ***tmap*** package to create a high cartographic quality accessibility to eldercare centres in Singapore. We reused `mapex` for the *bbox* argument.

```{r}
tmap_mode("plot")
tm_shape(hexagon_KD2SFCA,
         bbox = mapex) + 
  tm_fill(col = "accKD2SFCA",
          n = 10,
          style = "quantile",
          border.col = "black",
          border.lwd = 1) +
tm_shape(eldercare) +
  tm_symbols(size = 0.1) +
  tm_layout(main.title = "Accessibility to eldercare: KD2SFCA method",
            main.title.position = "center",
            main.title.size = 2,
            legend.outside = FALSE,
            legend.height = 0.45, 
            legend.width = 3.0,
            legend.format = list(digits = 6),
            legend.position = c("right", "top"),
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.5)
```

## 8.3 Statistical Graphic Visualization

Let's now compare the distribution of KD2CFA accessibility values by URA Planning Region.

First, we need to add the planning region field into *`hexagon_KD2SFCA`* simple feature data frame using the code chunk below.

```{r}
hexagon_KD2SFCA <- st_join(hexagon_KD2SFCA, mpsz, 
                          join = st_intersects)
```

Next, `ggplot()` will be used to plot the distribution by using boxplots.

```{r}
ggplot(data=hexagon_KD2SFCA, 
       aes(y = accKD2SFCA, 
           x= REGION_N)) +
  geom_boxplot() +
  geom_point(stat="summary", 
             fun.y="mean", 
             colour ="red", 
             size=2)
```

# 9. MODELLING AND VISUALIZING ACCESSIBILITY USING THE SPATIAL ACCESSIBILITY MEASURE (SAM) METHOD

## 9.1 Computing the SAM accessibility

\
The code chunk below calculates Hansen’s accessibility using `ac()` of **SpatialAcc** and `data.frame()` is used to save the output in a data frame called `acc_SAM`. Notice that `SAM` is used for "family" argument.

```{r}
acc_SAM <- data.frame(ac(hexagons$demand,
                         eldercare$capacity,
                         distmat_km, 
                         d0 = 50,
                         power = 2, 
                         family = "SAM"))

colnames(acc_SAM) <- "accSAM"
acc_SAM <- tbl_df(acc_SAM)
hexagon_SAM <- bind_cols(hexagons, acc_SAM)
```

## 9.2 Visualizing SAM's Accessibility

The code chunk below uses a collection of mapping functions of the ***tmap*** package to create a high cartographic quality accessibility to eldercare centers in Singapore. Again, as is in the previous sections, `mapex` is reused for the ***bbox*** argument.

```{r}
tmap_mode("plot")
tm_shape(hexagon_SAM,
         bbox = mapex) + 
  tm_fill(col = "accSAM",
          n = 10,
          style = "quantile",
          border.col = "black",
          border.lwd = 1) +
tm_shape(eldercare) +
  tm_symbols(size = 0.1) +
  tm_layout(main.title = "Accessibility to Eldercare: SAM method",
            main.title.position = "center",
            main.title.size = 2,
            legend.outside = FALSE,
            legend.height = 0.45, 
            legend.width = 3.0,
            legend.format = list(digits = 3),
            legend.position = c("right", "top"),
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.5)
```

## 9.3 Statistical Graphic Visualization

Now, we will compare the distribution of SAM accessibility values by URA Planning Region.

First, we need to add the planning region field to the `hexagon_SAM` simple feature data frame using the code snippet below.

```{r}
hexagon_SAM <- st_join(hexagon_SAM, mpsz, 
                       join = st_intersects)
```

Next, `ggplot()` will be used to plot the distribution by using boxplots.

```{r}
ggplot(data=hexagon_SAM, 
       aes(y = accSAM, 
           x= REGION_N)) +
  geom_boxplot() +
  geom_point(stat="summary", 
             fun.y="mean", 
             colour ="red", 
             size=2)
```
