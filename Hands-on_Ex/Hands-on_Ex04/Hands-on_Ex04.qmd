---
title: "Hands-on Exercise 4: Spatial Weights and Applications"
author: "Lorielle Malveda"
date: "September 15, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
  warning: false
---

# 1. OVERVIEW

This Hands-on Exercise is about computing spatial weights using R.

We are going to:

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute spatial weights using appropriate functions of **spdep** package, and

-   calculate spatially lagged variables using appropriate functions of **spdep** package.

# 2. GETTING STARTED

This code chunk uses `p_load()` of the ***pacman*** package (stands for Package Manager) to check if the following packages are installed in the computer. The packages will then be launched into R.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## 2.1 Importing Data

Datasets:

-   Hunan County Boundary Layer: geospatial data set in the ESRI shapefile format.

-   Hunan_2012.csv: aspatial data which contains selected Hunan’s local development indicators in 2012.

### **SHAPEFILE**

Let us use the **sf** package to import the Hunan shapefile into R.

The output is a simple features ***sf*** object.

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

### CSV

Next, we will import *Hunan_2012.csv* into R by using the read_csv function of the **readr** package.

The output is R dataframe class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## 2.2 PERFORMING RELATIONAL JOIN

The following code chunk updates the attribute table of the `hunan` SpatialPolygonsDataFrame by merging it with the attribute fields of the `hunan2012` dataframe. This is accomplished using the `left_join()` function from the `dplyr` package:

```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

# 3. VISUALIZING REGIONAL DEVELOPMENT INDICATOR

Next, we'll prepare a basemap and a choropleth map to display the distribution of GDP per capita for 2012, using the `qtm()` function from the `tmap` package.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

# 4. COMPUTING CONTIGUITY SPATIAL WEIGHTS

In this section, we are going to utilize the `poly2nb()` function of the ***spdep*** package to calculate contiguity weight matrices for the study area. This function creates a neighbors list based on regions with contiguous (shared) boundaries. According to the documentation, we can pass a “queen” argument, which takes either "TRUE" or "FALSE". If this argument is not specified, the default is "TRUE". This means that if you do not specify `queen = FALSE`,then the function will return a list of first-order neighbors using the QUEEN contiguity criteria.

## 4.1 Computing (QUEEN) Contiguity-based Neighbors

The code chunk below is used to compute the Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

Looking at the summary report shown above, we can see that Hunan has 88 area units. The most connected area unit has 11 neighbors, while 2 area units have only 1 neighbor each.

For each polygon in the polygon object, *`wm_q`* lists all neighboring polygons.

For example, to see the neighbors for the first polygon in the object:

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in `hunan` *SpatialPolygonsDataFrame* class.

Use the code chunk below to retrieve the county name for `Polygon ID = 1` :

```{r}
hunan$County[1]
```

Apparently, **Polygon ID=1** is the **Anxiang county**.

To reveal the county names of the five neighboring polygons, the code chunk below will be used:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

Let's check the GDPPC (Gross Domestic Product Per Capita) of these five counties:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

The output above shows that the GDPPC of the five nearest neighbors based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.

Let's look at the the complete weight matrix by using *`str()`*.

```{r}
str(wm_q)
```

Wow that's a long list!

Be warned: The output might cut across several pages. Save the trees if you are going to print out the report.

## 4.2 Creating (ROOK) Contiguity-based Neighbors

After QUEEN, let's check out ROOK!

To compute the Rook contiguity weight matrix:

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

Same with the previous results, the summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbors., while 2 area units have only 1 neighbor each.

## 4.3 Visualizing Contiguity Weights

To create a connectivity graph, which links points representing neighboring polygons, we first need to obtain points from the polygons. The most common approach is to use polygon centroids. To do this, we'll use the `sf` package to calculate centroids for our polygons. However, the centroids' coordinates must be stored in a separate data frame.

Using the `purrr` package's `map_dbl` function, we can apply the `st_centroid` function to each polygon in the geometry column. We will extract the longitude from the first value of each centroid, helping us create the connectivity graph.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude with one key difference. We access the second value per each centroid with `[[2]]`.

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Now that we have latitude and longitude, we use `cbind` to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

Let us check the first few observations to see if things are formatted correctly:

```{r}
head(coords)
```

### PLOTTING QUEEN CONTIGUITY-BASED NEIGHBORS MAP

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

### PLOTTING ROOK CONTIGUITY-BASED NEIGHBORS MAP

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### PLOTTING BOTH QUEEN AND ROOK CONTIGUITY-BASED NEIGHBOR MAPS

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

Tadaaaaa!

# 5. COMPUTING DISTANCE-BASED NEIGHBORS

Let's explore how to derive distance-based weight matrices by using the [`dnearneigh()`](https://r-spatial.github.io/spdep/reference/dnearneigh.html) of the ***spdep*** package. This function identifies neighbors of region points based on Euclidean distance within a specified distance band (with lower d1= and upper d2=) bounds controlled by the `bounds=` argument.

If unprojected coordinates are used, and either specified in the x coordinates object or passed as a two column matrix with `longlat=TRUE`, then the function will calculate great circle distances in **km**, assuming the WGS84 reference ellipsoid.

## 5.1 Determine the Cut-off Distance

Determine the upper limit for distance band using the steps below:

1.  Return a matrix with the indices of points belonging to the set of the k-nearest neighbors of each other by using the [`knearneigh()`](https://r-spatial.github.io/spdep/reference/knearneigh.html) function of the ***spdep*** package.
2.  Convert the *knn object* into a neighbors list of ***class nb*** with a list of integer vectors containing neighbor region number IDs using [`knn2nb()`](https://r-spatial.github.io/spdep/reference/knn2nb.html).
3.  Return the length of neighbor relationship edges by using [`nbdists()`](https://r-spatial.github.io/spdep/reference/nbdists.html) of ***spdep***.
4.  Remove the list structure of the returned object by using [**`unlist()`**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The largest first nearest neighbor distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbor.

## 5.2 Computing the Fixed Distance Weight Matrix

Next, we will compute the distance weight matrix by using `dnearneigh()` as shown in the code chunk below.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Based on the output above, the average number of links means that each region in the dataset is connected to approximately 3.7 other regions.

Next, let's use `str()` to display the content of the wm_d62 weight matrix.

```{r}
str(wm_d62)
```

Another way to display the structure of the weight matrix is to combine `table()`and `card()` of the ***spdep*** package.

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

### PLOTTING THE FIXED DISTANCE WEIGHT MATRIX

Next, we will plot the distance weight matrix by using the code chunk below.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines represent the links of the 1st nearest neighbors, while the black lines show the links of neighbors within the cut-off distance of 62km.

Let's plot both of them next to each other by using the code chunk below:

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

## 5.3 Computing the Adaptive Distance Weight Matrix

In a fixed distance weight matrix, more densely settled areas (usually the urban areas) have the tendency to have more neighbors and the opposite goes for less densely settled areas (usually the rural counties). Having many neighbors smooths the neighbor relationship across more neighbor.

Let's control the numbers of neighbors directly using ***k-nearest neighbors,*** either accepting asymmetric neighbors or imposing symmetry:

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Let's display the content of the matrix using `str()`.

```{r}
str(knn6)
```

Observe the results above. Each county has six neighbors, no less no more!

### PLOTTING DISTANCE-BASED NEIGHBORS

Plotting the weight matrix:

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# 6. WEIGHTS BASED ON IDW (Inversed Distance Weighting)

In this section, you will learn how to derive a spatial weight matrix based on Inversed Distance Weighting method.

First, we will compute the distances between areas by using `nbdist()`of **spdep**.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

Pretty long list!

# 7. ROW-STANDARDIZED WEIGHTS MATRIX

Next, let's assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weights (`style=“W”`).

This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.

One drawback of this approach is that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.

Note for `style='W'`, there are that other more robust options available, notably `style=“B”`.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

The `zero.policy=TRUE` option allows for the inclusion of lists of non-neighbors, which should be used cautiously as it may mask the absence of neighbors in the dataset. Conversely, setting `zero.policy=FALSE` would result in an error if neighbors are missing.

To view the weights of the first polygon’s eight neighbors, type:

```{r}
rswm_q$weights[10]
```

Each neighbor is assigned a 0.125 of the total weight.

This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.125 before being tallied.

Using the same method, we can also derive a **row standardized distance weight matrix**:

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

# 8. APPLICATION OF SPATIAL WEIGHT MATRIX

## 8.1 Spatial Lag with Row-Standardized Weights

Finally, we’ll compute the average neighbor GDPPC value for each polygon.

These values are often referred to as **spatially lagged values**.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

Let's retrieve the GDPPC of these five counties by using the code chunk below.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

We can append the spatially lag GDPPC values onto Hunan sf data frame by using the code chunk below.

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

The following table shows the average neighboring income values (stored in the Inc.lag object) for each county.

```{r}
head(hunan)
```

Next, we will plot both the GDPPC and spatial lag GDPPC for comparison.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

## 8.2 Spatial Lag as a Sum of Neighboring Values

Calculate **spatial lag** as a sum of neighboring values by assigning binary weights. Let's go back to our neighbors list, then apply a function that will assign binary weights. Then, we use `glist =` in the `nb2listw` function to assign weights.

We start at 1 per each neighbor. This is done with `lapply` to manipulate the neighbors structure. It applies a function across each value in the neighbors structure.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

Use `lag.listw` to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

Examining the result:

```{r}
lag_sum
```

Based on the results, spatial lag basically refers to a measure that captures the influence of neighboring values on a given location. We are looking at how the value at a particular location is affected by the values of nearby locations.

Next, we will append the *`lag_sum` GDPPC* field into `hunan` sf data frame by using the code chunk below.

```{r}
hunan <- left_join(hunan, lag.res)
```

Let's compare the *GDPPC* and *Spatial Lag Sum GDPPC*.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

## 8.3 Spatial Window Average

The spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.

To add the diagonal element to the neighbor list, we just need to use *`include.self()`* from ***spdep***.

```{r}
wm_qs <- include.self(wm_q)
```

Let us take a good look at the neighbor list of area \[1\] by using the code chunk below.

```{r}
wm_qs[[1]]
```

Notice that now \[1\] has six neighbors instead of five.

Now we obtain weights with *`nb2listw()`:*

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

Again, we use *nb2listw()* and *glist()* to explicitly assign weight values.

Lastly, we just need to create the lag variable from our weight structure and GDPPC variable.

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

Next, we will convert the lag variable ***listw*** object into a data.frame by using *`as.data.frame()`*.

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

Next, the code chunk below will be used to append ***lag_window_avg** GDPPC* values onto ***hunan*** sf data.frame by using *`left_join()`* of **dplyr** package.

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below.

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

Lastly, let's use `qtm()` to plot ***lag_gdppc*** and ***w_ave_gdppc*** maps next to each other for quick comparison.

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

For more effective comparison, it is actually advisable to use the **core *tmap*** mapping functions.

## 8.4 Spatial Window Sum

The Spatial Window Sum is the counter part of the window average, but without using row-standardized weights.

To add the diagonal element to the neighbor list, we just need to use *`include.self()`* from ***spdep***.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Next, we will assign binary weights to the neighbor structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

Now \[1\] has six neighbors instead of five.

Again, we use *`nb2listw()`* and *`glist()`* to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With our new weight structure, we can compute the **lag variable** with *`lag.listw()`*.

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Next, we will convert the lag variable ***listw*** object into a data.frame by using *`as.data.frame()`*.

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Let's append the *w_sum GDPPC* values onto the *hunan* sf data.frame by using *`left_join()`* of the **dplyr** package.

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

Let's compare using the `kable()` function of the ***Knitr*** package:

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Use the `qtm()` function to compare:

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```

For more effective comparison, it is actually advisable to use the **core *tmap*** mapping functions.

# 9. REFERENCES

-   [Creating Neighbours using sf objects](https://cran.r-project.org/web/packages/spdep/vignettes/nb_sf.html)
